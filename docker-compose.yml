version: '4.0'

services:
  # Backend API service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    image: solsynthai/api:${TAG:-latest}
    container_name: solsynthai-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://solsynthai_app:${DB_PASSWORD}@postgres:5432/solsynthai
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - SOLANA_RPC_URL=${SOLANA_RPC_URL}
      - SENTRY_DSN=${SENTRY_DSN}
      - PORT=3000
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - contract-cache:/app/cache
    networks:
      - solsynthai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${API_URL}
        VITE_SOLANA_NETWORK: ${SOLANA_NETWORK:-devnet}
    image: solsynthai/frontend:${TAG:-latest}
    container_name: solsynthai-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - api
    networks:
      - solsynthai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: solsynthai-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=solsynthai
      - POSTGRES_USER=solsynthai_app
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/src/database/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - ./backend/src/database/migrations:/docker-entrypoint-initdb.d/migrations
    ports:
      - "5432:5432"
    networks:
      - solsynthai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U solsynthai_app -d solsynthai"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: 
      - postgres
      - -c
      - max_connections=200
      - -c
      - shared_buffers=512MB
      - -c
      - effective_cache_size=1536MB
      - -c
      - maintenance_work_mem=128MB
      - -c
      - checkpoint_completion_target=0.9
      - -c
      - wal_buffers=16MB
      - -c
      - default_statistics_target=100
      - -c
      - random_page_cost=1.1
      - -c
      - effective_io_concurrency=200
      - -c
      - work_mem=6553kB
      - -c
      - min_wal_size=1GB
      - -c
      - max_wal_size=4GB

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: solsynthai-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - solsynthai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring service
  prometheus:
    image: prom/prometheus:latest
    container_name: solsynthai-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - solsynthai-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'

  # Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: solsynthai-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - solsynthai-network
    depends_on:
      - prometheus

networks:
  solsynthai-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  contract-cache:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
